#!/usr/bin/env python

from __future__ import division

import math
import time
import random
import threading
import collections

import numpy
import pygame

import rospy
from xv11_driver.msg import LaserMeasurements
from std_msgs.msg import Header
from geometry_msgs.msg import TwistStamped, PoseStamped, Pose, Point, Quaternion
from tf import transformations

from ieee2014_localization.vector import v, V

SCALE = 200
def round_point((x, y)):
    return int(SCALE*x+320+.5), int(SCALE*-y+240+.5)

inf = 1e500
assert math.isinf(inf)

xyzw_array = lambda o: numpy.array([o.x, o.y, o.z, o.w])

class Line(object):
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def draw(self, display):
        pygame.draw.line(display, (255, 255, 255), round_point(self.point1), round_point(self.point2))
    
    def intersect_with_ray(self, start, direction):
        start = V(start)
        direction = V(direction).unit()
        
        line_point = V(self.point1)
        line_direction = (V(self.point2) - V(self.point1)).unit()
        line_perpendicular = v(line_direction[1], -line_direction[0])
        
        start2 = start - line_point
        
        signed_distance = start2 * line_perpendicular
        decrease = direction * line_perpendicular
        
        res = -signed_distance/decrease
        if res < 0:
            return inf
        
        hit_point = start + res * direction
        distance_along_line = (hit_point - line_point) * line_direction
        if not (0 <= distance_along_line <= (V(self.point2) - V(self.point1)).norm()):
            return inf
        
        return res

class RobotParticle(object):
    def __init__(self, position, angle, weight=1):
        self.position = V(position)
        self.angle = angle
        self.weight = weight
    
    @property
    def forward_vector(self):
        return v(math.cos(self.angle), math.sin(self.angle))
    @property
    def left_vector(self):
        return v(math.cos(self.angle+math.pi/2), math.sin(self.angle+math.pi/2))
    
    def predict(self, odom_msg):
        self.position += self.forward_vector * odom_msg.pose.position.x + \
                         self.left_vector * odom_msg.pose.position.y
        self.angle += odom_msg.pose.orientation.z * 2 # hackish, valid for small angles
        
        dt = 1/360/3
        self.position += v(
            random.gauss(0, math.sqrt(.01*dt)),
            random.gauss(0, math.sqrt(.01*dt)),
        )
        self.angle += random.gauss(0, math.sqrt(.01*dt))
    
    def update(self, lidar_msg, course):
        laser_angle = lidar_msg.angle_min
        
        start = self.position
        direction = v(math.cos(self.angle + laser_angle), math.sin(self.angle + laser_angle))
        
        hit_obj = min(course, key=lambda obj: obj.intersect_with_ray(start, direction))
        dist = hit_obj.intersect_with_ray(start, direction)
        
        measured = lidar_msg.ranges[0]
        
        if not math.isinf(dist) and not math.isinf(measured):
            self.weight *= .1 + .9*math.e**(-math.log(dist/measured)**2)
    
    def draw(self, display):
        r = .05
        pygame.draw.circle(display, (0, 255, 0), round_point(self.position), int(SCALE*r+.5))
        pygame.draw.line(display, (0, 0, 255), round_point(self.position), round_point(self.position + r*self.forward_vector))

class MessageOrderer(object):
    def __init__(self, name_callback_pairs):
        self._items = dict(
            (name, (callback, collections.deque()))
        for name, callback in name_callback_pairs)
    
    def add_message(self, name, message):
        callback, deque = self._items[name]
        if deque:
            assert message.header.stamp > deque[-1].header.stamp
        deque.append(message)
        self._process()
    
    def _process(self):
        while all(deque for callback, deque in self._items.itervalues()):
            name = min(self._items,
                key=lambda name: self._items[name][1][0].header.stamp)
            callback, deque = self._items[name]
            callback(deque.popleft())

def main():
    rospy.init_node('ieee2014_localization')

    course_length = (97 - 3/4 * 2) * 0.0254
    course_width = (49 - 3/4 * 2) * 0.0254
    course = [
        Line((-course_length/2, +course_width/2), (+course_length/2, +course_width/2)),
        Line((+course_length/2, +course_width/2), (+course_length/2, -course_width/2)),
        Line((+course_length/2, -course_width/2), (-course_length/2, -course_width/2)),
        Line((-course_length/2, -course_width/2), (-course_length/2, +course_width/2)),
    ]
    
    N = 20
    particles = [
        RobotParticle((
            random.uniform(-course_length/2, course_length/2),
            random.uniform(-course_width/2, course_width/2),
        ), random.uniform(0, 2*math.pi))
    for i in xrange(N)]
    
    lock = threading.Lock()
    def callWithLock(func, *args, **kwargs):
        with lock:
            func(*args, **kwargs)
    
    mo = MessageOrderer([
        ('odom', lambda odom_msg: [particle.predict(odom_msg) for particle in particles]),
        ('lidar', lambda lidar_msg: [particle.update(lidar_msg, course) for particle in particles]),
    ])
    rospy.Subscriber('odom', PoseStamped,
        lambda msg: callWithLock(mo.add_message, 'odom', msg))
    rospy.Subscriber('lidar', LaserMeasurements,
        lambda msg: callWithLock(mo.add_message, 'lidar', msg))
    
    def fixup():
        total_weight = sum(particle.weight for particle in particles)
        for particle in particles:
            particle.weight /= total_weight
        
        effective_N = 1/sum(particle.weight**2 for particle in particles)
        if effective_N < N/2:
            print 'resampling'
            new = [
                RobotParticle(particle.position, particle.angle)
                for particle in particles
                for i in xrange(int(N*particle.weight + random.random()))
            ]
            particles[:] = new
    rospy.Timer(rospy.Duration(.1), lambda te: callWithLock(fixup))
    
    display = pygame.display.set_mode((640, 480))
    def update_screen():
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return
        
        display.fill((0, 0, 0))
        for obj in course:
            obj.draw(display)
        for particle in particles:
            particle.draw(display)
        
        pygame.display.update()
    rospy.Timer(rospy.Duration(.1), lambda te: callWithLock(update_screen))

    rospy.spin()

main()
