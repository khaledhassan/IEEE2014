#!/usr/bin/python

import math
import time

import numpy

import rospy
from std_msgs.msg import Header
from geometry_msgs.msg import PoseStamped, Twist, Vector3, TwistStamped
from tf import transformations

from ieee2014_controller.srv import SetEnabled, SetEnabledResponse

rospy.init_node('controller')

def send((xvel, yvel), angvel):
    pub.publish(TwistStamped(
        header=Header(
            stamp=rospy.Time.now(),
            frame_id='/base_link',
        ),
        twist=Twist(
            linear=Vector3(xvel, yvel, 0),
            angular=Vector3(0, 0, angvel),
        ),
    ))

enabled = False
def set_enabled(req):
    global enabled
    enabled = req.enabled
    if not enabled:
        send((0, 0), 0)
    return SetEnabledResponse()
rospy.Service('~set_enabled', SetEnabled, set_enabled)

xyzw_array = lambda o: numpy.array([o.x, o.y, o.z, o.w])
def angle_diff(a, b):
    return (a - b + math.pi) % (2*math.pi) - math.pi
def unit_vector(v):
    if numpy.linalg.norm(v) == 0: return v
    return numpy.array(v)/numpy.linalg.norm(v)
def sign(x):
    if x > 0: return 1
    elif x < 0: return -1
    else: return 0

pub = rospy.Publisher('twist', TwistStamped)

max_linear_vel = 1
max_linear_acc = max_linear_vel/.5

max_angular_vel = 4
max_angular_acc = max_angular_vel/.5

desired_position = numpy.array([0, 0])
desired_yaw = 0
def got_desired_pose_msg(msg):
    global desired_position, desired_yaw
    desired_position = numpy.array([msg.pose.position.x, msg.pose.position.y])
    desired_yaw = transformations.euler_from_quaternion(xyzw_array(msg.pose.orientation))[2]
rospy.Subscriber('desired_pose', PoseStamped, got_desired_pose_msg)

def got_pose(msg):
    if not enabled: return
    
    #desired_position = numpy.array(
    #    [+0.5, +0.25] if time.time() % 20 < 5 else
    #    [+0.5, -0.25] if time.time() % 20 < 10 else
    #    [-0.5, -0.25] if time.time() % 20 < 15 else
    #    [-0.5, +0.25])
    #desired_position = numpy.array(
    #    [+.32, -.11] if time.time() % 4 < 2 else
    #    [1.03, .34])
    #desired_position = numpy.array([0, 0])
    #desired_yaw = 0
    
    
    position = numpy.array([msg.pose.position.x, msg.pose.position.y])
    yaw = transformations.euler_from_quaternion(xyzw_array(msg.pose.orientation))[2]
    #print position, yaw
    
    position_error = desired_position - position
    angle_error = angle_diff(desired_yaw, yaw)
    
    linear_speed = min(math.sqrt(2 * numpy.linalg.norm(position_error) * max_linear_acc), max_linear_vel)
    angular_speed = min(math.sqrt(2 * abs(angle_error) * max_angular_acc), max_angular_vel)
    
    desired_vel = linear_speed * unit_vector(position_error)
    desired_angvel = angular_speed * sign(angle_error)
    
    if numpy.linalg.norm(position_error) < 0.05:
        desired_vel *= numpy.linalg.norm(position_error)/0.05
    if abs(angle_error) < 0.05:
        desired_angvel *= abs(angle_error)/0.05
    
    forward = numpy.array([math.cos(yaw), math.sin(yaw)])
    left = numpy.array([math.cos(yaw+math.pi/2), math.sin(yaw+math.pi/2)])
    
    send((forward.dot(desired_vel), left.dot(desired_vel)), desired_angvel)
sim = rospy.get_param('/controller/sim', "N")
if(sim == 'Y'):
	rospy.loginfo("\nNOTE: controller using simulation pose data")
	rospy.Subscriber('sim_pose', PoseStamped, got_pose)
else:
	rospy.Subscriber('pose', PoseStamped, got_pose)

rospy.spin()
