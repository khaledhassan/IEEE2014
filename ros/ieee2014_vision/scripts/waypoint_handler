#!/usr/bin/env python

import pygame
import rospy
import time
import numpy as np
import os, string

from collections import deque
from tf import transformations
from ieee2014_vision.msg import BlockPositions
from std_msgs.msg import Header, Float64
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion, PoseArray

instructions = {"wait": 1, "scan": 2, "target": 3, "go_to_end": 4}

def get_instruction(instruct):
	return (instructions[instruct[0]], instruct[1])



class waypoint(object):
	#Always new style!
	def __init__(self, start, angle=0):
		self.position = start
		self.angle = angle
		self.instruction = ("wait", 10)

	def set_pos(self,pos):
		if((pos[0] < course_length/2) and (pos[0] > -course_length/2) and
			(pos[1] < course_width/2) and (pos[1] > -course_width/2)):
			self.position = pos
		else:
			pass
			#No change!
	def set_ang(self, ang):
		self.angle = ang

class waypoint_handler(object):
	def __init__(self):
		#Initialized with no points
		self.waypoints = deque()
		
		self.control_pub = rospy.Publisher('desired_pose', PoseStamped)
		self.waypoint_pub = rospy.Publisher('waypoints', PoseStamped[]
		
		sim = rospy.get_param('/state_visualizer/sim', "N")
		if(sim == 'Y'):
			rospy.loginfo("\nNOTE: state_visualizer Using simulation pose data")
			self.poseSub = rospy.Subscriber('sim_pose', PoseStamped, self.set_pose)
			
		elif(sim == 'N'):
			rospy.loginfo("\nNOTE: state_visualizer NOT simulating")
			self.poseSub = rospy.Subscriber('pose', PoseStamped, self.set_pose)
			
		
	def add_waypoint(self, wpt):
		self.waypoints.append(wpt)
		
	def top(self, wpt):
		self.waypoints.appendleft(wpt)
		
	def pop(self):
		return self.waypoints.popleft()
		
	@property
	def next(self):
		return self.waypoints.popleft()
	
	
		
		
		
		
		
		
		
